numSubjs - length(which_test)
length(which_test)
saveRDS(all_dat, file = paste0("Preprocessed/1_preprocessed_DDT_trait_explanatory_allgroups_testset.rds"))
saveRDS(all_dat, file = paste0("Data/Preprocessed/1_preprocessed_DDT_trait_explanatory_allgroups_testset.rds"))
rm(list=ls())
library(stringr)
library(dplyr)
library(tidyr)
library(foreach)
setwd("~/Dropbox/Box/GitHub/Haines_2020_CPS")
fac_to_num <- function(x) as.numeric(as.character(x))
datasets <- c("MTURK", "REP", "TAL")
bis_reverse <- c(1, 7, 8, 9, 10, 12, 13, 15, 20, 29, 30)
stai_reverse <- c(1, 2, 5, 8, 10, 11, 15, 16, 19, 20, 21,
26, 27, 30, 33, 34, 36, 39)
att <- c(5,6,9,11,20,24,26,28)
mot <- c(2,3,4,16,17,19,22,23,25,30)
noplan <- c(1,7,8,10,12,13,14,15,18,27,29)
results <- foreach(d=datasets, .combine = "rbind") %do% {
tmp_dat <- read.csv(paste0("Data/Survey/", d, ".csv"), header = T) %>%
mutate(ID = substr(gsub(x = SubjID, pattern = " ", replacement = ""), 1, 8)) %>%
mutate(Group = d,
age   = ifelse(Group=="MTURK", Age, Dem_2 + 7),
sex   = ifelse(Group=="MTURK", Sex - 1, 2 - Dem_1)) %>%
select(-SubjID)
if (d != "MTURK") {
tmp_dat %>%
select(Group, ID, age, sex, contains("bis"),
contains("stai"), contains("audit"),
paste0("DAST_", c(1, 3, 5, 6, 7, 8, 11, 15, 17, 18))) %>% # DAST-10 questions from full 20 question scale
rename_at(vars(contains("DAST")), ~ paste0("DAST_", 1:10)) %>% # renaming to match DAST-10
mutate_at(vars(paste0("DAST_", 1:10)), function(x) 2 - x) %>% # Qualtrics codes 1 == Yes, 2 == No. here reversing this
mutate_at(vars(paste0("AUDIT_", 1:8)), function(x) x - 1) %>%
mutate_at(vars(paste0("AUDIT_", 9:10)), function(x) (x - 1)*2) %>%
mutate(DAST_3  = (1 - DAST_3)) %>% # reverse scored question
select(Group, ID, age, sex, contains("bis"),
contains("stai"), contains("audit"), contains("dast"))
} else {
tmp_dat %>%
mutate(att_1 = ifelse(attn_1==0, 1, 0),
att_3 = ifelse(attn_3==1, 1, 0),
att_5 = ifelse(attn_5==1, 1, 0),
att_6 = ifelse(attn_6==0, 1, 0)) %>%
mutate(att_pass = select(., paste0("att_", c(1, 3, 5, 6))) %>%
rowSums(., na.rm = T)) %>%
filter(att_pass >= 3) %>%
mutate(AUDIT_10 = (AUDIT_10 - 1) * 2,
DAST_3 = (1 - DAST_3)) %>%
select(Group, ID, age, sex, contains("bis"),
contains("stai"), contains("audit"), contains("dast"))
}
} %>%
mutate_at(vars(paste0("BIS_", bis_reverse)), function(x) 5 - x) %>%
mutate_at(vars(paste0("STAI_", stai_reverse)), function(x) 5 - x) %>%
mutate(DAST = select(., contains("DAST")) %>% rowSums(.),
AUDIT = select(., contains("AUDIT")) %>% rowSums(.),
bis_att = select(., num_range("BIS_", att)) %>% rowSums(.),
bis_mot = select(., num_range("BIS_", mot)) %>% rowSums(.),
bis_noplan = select(., num_range("BIS_", noplan)) %>% rowSums(.),
stai_s = select(., num_range("STAI_", 1:20)) %>% rowSums(.),
stai_t = select(., num_range("STAI_", 21:40)) %>% rowSums(.))
write.table(results, file = paste0("Data/Preprocessed/0_preprocessed_allgroups_allscales.txt"),
row.names = F, col.names = T, sep = ",")
library(dplyr)
setwd("~/Dropbox/Box/GitHub/Haines_2020_CPS")
datasets <- c("REP", "MTURK", "TAL")
for (d in datasets) {
# Find names of ADO files for subject who completed task
ids_all <- list.files(paste0("Data/DDT/", d))
# Read in scored survey data (REMOVE Subject TAL006 --> consistency with validation paper)
survey_dat <- read.table(paste0("Data/Preprocessed/0_preprocessed_allgroups_allscales.txt"),
header = T, sep = ",") %>%
filter(Group == d) %>%
select(ID, contains("stai"), contains("bis"), DAST, AUDIT, age, sex) %>%
filter(!is.na(stai_s) & !is.na(bis_noplan) & ID != "TAL006")
survey_dat$ID <- as.character(survey_dat$ID)
ddt_dat <- NULL
subjID_count <- 0
for (i in survey_dat$ID) {
# Read in subject's ADO estiamtes
if (i %in% ids_all) {
# mturk and REP/TAL formatted differently
if (d == "MTURK") {
tmp_obs1 <- try(read.table(paste0("Data/DDT/", d, "/", i, "/obs1.txt"),
fill = T, header = T, row.names = NULL),
silent = T)
tmp_obs2 <- try(read.table(paste0("Data/DDT/", d, "/", i, "/obs2.txt"),
fill = T, header = F, row.names = NULL),
silent = T)
} else {
tmp_obs1 <- try(read.table(paste0("Data/DDT/", d, "/", i, "/ADO1/obs.txt"),
fill = T, header = T, row.names = NULL, nrows = 42),
silent = T)
tmp_obs2 <- try(read.table(paste0("Data/DDT/", d, "/", i, "/ADO2/obs.txt"),# skip = 43,
fill = T, header = T, row.names = NULL, nrows = 42),
silent = T)
}
if (is.data.frame(tmp_obs1) && is.data.frame(tmp_obs2) && (nrow(tmp_obs1) + nrow(tmp_obs2) > 0)) {
names(tmp_obs2) <- names(tmp_obs1)
subjID_count <- subjID_count + 1
tmp_ado <- rbind(tmp_obs1, tmp_obs2)
names(tmp_ado)[3:6] <- c("amount_sooner", "delay_sooner", "amount_later", "delay_later")
tmp_ado$checkID <- i
tmp_ado$subjID <- subjID_count
ddt_dat <- rbind(ddt_dat, tmp_ado)
}
}
}
numSubjs <- length(unique(ddt_dat$subjID))
Tsubj <- as.vector( rep( 0, numSubjs ) ) # number of trials for each subject
for ( i in 1:numSubjs )  {
curSubj  <- unique(ddt_dat$subjID)[ i ]
Tsubj[i] <- sum( ddt_dat$subjID == curSubj )  # Tsubj[N]
}
# Setting maxTrials
maxTrials <- max(Tsubj)
delay_later   <- array(0, c(numSubjs, maxTrials) )
amount_later  <- array(0, c(numSubjs, maxTrials) )
delay_sooner  <- array(0, c(numSubjs, maxTrials) )
amount_sooner <- array(0, c(numSubjs, maxTrials) )
choice <- array(-1, c(numSubjs, maxTrials) )
for (i in 1:numSubjs) {
curSubj      <- unique(ddt_dat$subjID)[i]
useTrials    <- Tsubj[i]
tmp          <- subset(ddt_dat, ddt_dat$subjID == curSubj)
delay_later[i, 1:useTrials]   <- tmp$delay_later
amount_later[i, 1:useTrials]  <- tmp$amount_later
delay_sooner[i, 1:useTrials]  <- tmp$delay_sooner
amount_sooner[i, 1:useTrials] <- tmp$amount_sooner
choice[i, 1:useTrials] <- tmp$choice
}
dataList <- list(
N             = numSubjs,
T             = maxTrials,
Tsubj         = Tsubj,
amount_later  = amount_later,
delay_later   = delay_later,
amount_sooner = amount_sooner,
delay_sooner  = delay_sooner,
choice        = choice
)
# Keep survey data for subject who have ADO data
survey_dat <- survey_dat[survey_dat$ID %in% ddt_dat$checkID,]
# Sanity check for ID order (should return true)
if(any(survey_dat$ID != rle(ddt_dat$checkID)$values)) {
stop("IDs do not match!!!")
} else {
cat("IDs match!!! Congrats for not messing it up.\n")
}
# Combine in list
all_dat <- list(survey_dat = survey_dat, ddt_dat = dataList)
# Print Summary stats for each group
print(with(all_dat$survey_dat,
data.frame(Group    = d,
Age_n    = length(age[!is.na(age)]),
Sex_n    = length(sex[!is.na(sex)]),
AUDIT_n  = length(AUDIT[!is.na(AUDIT)]),
DAST_n   = length(DAST[!is.na(DAST)]),
Age_mu   = mean(age, na.rm = T),
Sex_mu   = mean(sex, na.rm = T),
AUDIT_mu = mean(AUDIT, na.rm = T),
DAST_mu  = mean(DAST, na.rm = T),
Age_sd   = sd(age, na.rm = T),
Sex_sd   = sd(sex, na.rm = T),
AUDIT_sd = sd(AUDIT, na.rm = T),
DAST_sd  = sd(DAST, na.rm = T))))
saveRDS(all_dat, file = paste0("Data/Preprocessed/1_preprocessed_DDT_trait_descriptive_", d,".rds"))
}
library(dplyr)
# Set working directory
setwd("~/Dropbox/Box/GitHub/Haines_2020_CPS")
datasets     <- c("MTURK", "REP", "TAL")
ddt_dat      <- NULL
survey_dat   <- NULL
subjID_count <- 0
# Read in scored survey data (REMOVE Subject TAL006 --> consistency with validation paper)
survey_dat <- read.table("Data/Preprocessed/0_preprocessed_allgroups_allscales.txt",
header = T, sep = ",") %>%
select(ID, contains("stai"), contains("bis")) %>%
filter(!is.na(stai_s) & !is.na(bis_noplan) & ID != "TAL006")
survey_dat$ID <- as.character(survey_dat$ID)
for (d in datasets) {
# Find names of ADO files for subject who completed task
ids_all <- list.files(paste0("Data/DDT/", d))
for (i in survey_dat$ID) {
# Read in subject's ADO estiamtes
if (i %in% ids_all) {
# mturk and REP/TAL formatted differently
if (d == "MTURK") {
tmp_obs1 <- try(read.table(paste0("Data/DDT/", d, "/", i, "/obs1.txt"),
fill = T, header = T, row.names = NULL),
silent = T)
tmp_obs2 <- try(read.table(paste0("Data/DDT/", d, "/", i, "/obs2.txt"),
fill = T, header = F, row.names = NULL),
silent = T)
} else {
tmp_obs1 <- try(read.table(paste0("Data/DDT/", d, "/", i, "/ADO1/obs.txt"),
fill = T, header = T, row.names = NULL, nrows = 42),
silent = T)
tmp_obs2 <- try(read.table(paste0("Data/DDT/", d, "/", i, "/ADO2/obs.txt"),# skip = 43,
fill = T, header = T, row.names = NULL, nrows = 42),
silent = T)
}
if (is.data.frame(tmp_obs1) && is.data.frame(tmp_obs2) && (nrow(tmp_obs1) + nrow(tmp_obs2) > 0)) {
names(tmp_obs2) <- names(tmp_obs1)
subjID_count <- subjID_count + 1
tmp_ado <- rbind(tmp_obs1, tmp_obs2)
names(tmp_ado)[3:6] <- c("amount_sooner", "delay_sooner", "amount_later", "delay_later")
tmp_ado$checkID <- i
tmp_ado$subjID <- subjID_count
tmp_ado$group <- d
ddt_dat <- rbind(ddt_dat, tmp_ado)
}
}
}
}
numSubjs <- length(unique(ddt_dat$subjID))
which_test <- unique(ddt_dat$subjID[ddt_dat$group=="TAL"])
Tsubj <- as.vector( rep( 0, numSubjs ) ) # number of trials for each subject
for ( i in 1:numSubjs )  {
curSubj  <- unique(ddt_dat$subjID)[ i ]
Tsubj[i] <- sum( ddt_dat$subjID == curSubj )  # Tsubj[N]
}
# Setting maxTrials
maxTrials <- max(Tsubj)
delay_later   <- array(0, c(numSubjs, maxTrials) )
amount_later  <- array(0, c(numSubjs, maxTrials) )
delay_sooner  <- array(0, c(numSubjs, maxTrials) )
amount_sooner <- array(0, c(numSubjs, maxTrials) )
choice <- array(-1, c(numSubjs, maxTrials) )
for (i in 1:numSubjs) {
curSubj      <- unique(ddt_dat$subjID)[i]
useTrials    <- Tsubj[i]
tmp          <- subset(ddt_dat, ddt_dat$subjID == curSubj)
delay_later[i, 1:useTrials]   <- tmp$delay_later
amount_later[i, 1:useTrials]  <- tmp$amount_later
delay_sooner[i, 1:useTrials]  <- tmp$delay_sooner
amount_sooner[i, 1:useTrials] <- tmp$amount_sooner
choice[i, 1:useTrials] <- tmp$choice
}
dataList <- list(
N             = numSubjs - length(which_test),
N_test        = length(which_test),
T             = maxTrials,
Tsubj         = Tsubj[-which_test],
Tsubj_test    = Tsubj[which_test],
amount_later  = amount_later[-which_test,],
delay_later   = delay_later[-which_test,] ,
amount_sooner = amount_sooner[-which_test,],
delay_sooner  = delay_sooner[-which_test,],
choice        = choice[-which_test,],
amount_later_test  = amount_later[which_test,],
delay_later_test   = delay_later[which_test,] ,
amount_sooner_test = amount_sooner[which_test,],
delay_sooner_test  = delay_sooner[which_test,],
choice_test        = choice[which_test,]
)
# Keep survey data for subject who have ADO data
survey_dat <- survey_dat[survey_dat$ID %in% ddt_dat$checkID,]
# Sanity check for ID order (should return true)
if(any((survey_dat$ID == rle(ddt_dat$checkID)$values)==F)) {
stop("IDs do not match!!!")
} else {
cat("IDs match!!! Congrats for not messing it up.\n")
}
# Combine in list
all_dat <- list(survey_dat = survey_dat, ddt_dat = dataList, test_ids = which_test)
saveRDS(all_dat, file = paste0("Data/Preprocessed/1_preprocessed_DDT_trait_explanatory_testset.rds"))
library(dplyr)
# Set working directory
setwd("~/Dropbox/Box/GitHub/Haines_2020_CPS")
datasets     <- c("MTURK", "REP", "TAL")
ddt_dat      <- NULL
survey_dat   <- NULL
subjID_count <- 0
# Read in scored survey data (REMOVE Subject TAL006 --> consistency with validation paper)
survey_dat <- read.table("Data/Preprocessed/0_preprocessed_allgroups_allscales.txt",
header = T, sep = ",") %>%
select(ID, contains("stai"), contains("bis")) %>%
filter(!is.na(stai_s) & !is.na(bis_noplan) & ID != "TAL006")
survey_dat$ID <- as.character(survey_dat$ID)
datasets <- c("MTURK", "REP", "TAL")
for (d in datasets) {
# Find names of ADO files for subject who completed task
ids_all <- list.files(paste0("Data/DDT/", d))
for (i in survey_dat$ID) {
# Read in subject's ADO estiamtes
if (i %in% ids_all) {
# mturk and REP/TAL formatted differently
if (d == "MTURK") {
tmp_obs1 <- try(read.table(paste0("Data/DDT/", d, "/", i, "/obs1.txt"),
fill = T, header = T, row.names = NULL),
silent = T)
tmp_obs2 <- try(read.table(paste0("Data/DDT/", d, "/", i, "/obs2.txt"),
fill = T, header = F, row.names = NULL),
silent = T)
} else {
tmp_obs1 <- try(read.table(paste0("Data/DDT/", d, "/", i, "/ADO1/obs.txt"),
fill = T, header = T, row.names = NULL, nrows = 42),
silent = T)
tmp_obs2 <- try(read.table(paste0("Data/DDT/", d, "/", i, "/ADO2/obs.txt"),# skip = 43,
fill = T, header = T, row.names = NULL, nrows = 42),
silent = T)
}
if (is.data.frame(tmp_obs1) && is.data.frame(tmp_obs2) && (nrow(tmp_obs1) + nrow(tmp_obs2) > 0)) {
names(tmp_obs2) <- names(tmp_obs1)
subjID_count <- subjID_count + 1
tmp_ado <- rbind(tmp_obs1, tmp_obs2)
names(tmp_ado)[3:6] <- c("amount_sooner", "delay_sooner", "amount_later", "delay_later")
tmp_ado$checkID <- i
tmp_ado$subjID <- subjID_count
ddt_dat <- rbind(ddt_dat, tmp_ado)
}
}
}
}
numSubjs <- length(unique(ddt_dat$subjID))
Tsubj <- as.vector( rep( 0, numSubjs ) ) # number of trials for each subject
for ( i in 1:numSubjs )  {
curSubj  <- unique(ddt_dat$subjID)[ i ]
Tsubj[i] <- sum( ddt_dat$subjID == curSubj )  # Tsubj[N]
}
# Setting maxTrials
maxTrials <- max(Tsubj)
delay_later   <- array(0, c(numSubjs, maxTrials) )
amount_later  <- array(0, c(numSubjs, maxTrials) )
delay_sooner  <- array(0, c(numSubjs, maxTrials) )
amount_sooner <- array(0, c(numSubjs, maxTrials) )
choice <- array(-1, c(numSubjs, maxTrials) )
for (i in 1:numSubjs) {
curSubj      <- unique(ddt_dat$subjID)[i]
useTrials    <- Tsubj[i]
tmp          <- subset(ddt_dat, ddt_dat$subjID == curSubj)
delay_later[i, 1:useTrials]   <- tmp$delay_later
amount_later[i, 1:useTrials]  <- tmp$amount_later
delay_sooner[i, 1:useTrials]  <- tmp$delay_sooner
amount_sooner[i, 1:useTrials] <- tmp$amount_sooner
choice[i, 1:useTrials] <- tmp$choice
}
# Keep survey data for subjects who have ADO data
survey_dat <- survey_dat[survey_dat$ID %in% ddt_dat$checkID,]
# Sanity check for ID order (should return true)
if((any(survey_dat$ID == rle(ddt_dat$checkID)$values)==F)) {
stop("IDs do not match!!!")
} else {
cat("IDs match!!! Congrats for not messing it up.\n")
}
# Stan-ready data
dataList <- list(
N             = numSubjs,
T             = maxTrials,
Tsubj         = Tsubj,
amount_later  = amount_later,
delay_later   = delay_later,
amount_sooner = amount_sooner,
delay_sooner  = delay_sooner,
choice        = choice
)
# Combine in list
all_dat <- list(survey_dat = survey_dat, ddt_dat = dataList)
saveRDS(all_dat, file = "Data/Preprocessed/1_preprocessed_DDT_trait_explanatory.rds")
library(dplyr)
# Set working directory
setwd("~/Dropbox/Box/GitHub/Haines_2020_CPS")
datasets     <- c("MTURK", "REP", "TAL")
ddt_dat      <- NULL
survey_dat   <- NULL
subjID_count <- 0
# Read in scored survey data (REMOVE Subject TAL006 --> consistency with validation paper)
survey_dat <- read.table("Data/Preprocessed/0_preprocessed_allgroups_allscales.txt",
header = T, sep = ",") %>%
select(ID, contains("stai"), contains("bis")) %>%
filter(!is.na(stai_s) & !is.na(bis_noplan) &
!is.na(stai_t) & !is.na(bis_att) &
!is.na(bis_mot) & ID != "TAL006")
survey_dat$ID <- as.character(survey_dat$ID)
datasets <- c("MTURK", "REP", "TAL")
for (d in datasets) {
# Find names of ADO files for subject who completed task
ids_all <- list.files(paste0("Data/DDT/", d))
for (i in survey_dat$ID) {
# Read in subject's ADO estiamtes
if (i %in% ids_all) {
# mturk and REP/TAL formatted differently
if (d == "MTURK") {
tmp_obs1 <- try(read.table(paste0("Data/DDT/", d, "/", i, "/obs1.txt"),
fill = T, header = T, row.names = NULL),
silent = T)
tmp_obs2 <- try(read.table(paste0("Data/DDT/", d, "/", i, "/obs2.txt"),
fill = T, header = F, row.names = NULL),
silent = T)
} else {
tmp_obs1 <- try(read.table(paste0("Data/DDT/", d, "/", i, "/ADO1/obs.txt"),
fill = T, header = T, row.names = NULL, nrows = 42),
silent = T)
tmp_obs2 <- try(read.table(paste0("Data/DDT/", d, "/", i, "/ADO2/obs.txt"),# skip = 43,
fill = T, header = T, row.names = NULL, nrows = 42),
silent = T)
}
if (is.data.frame(tmp_obs1) && is.data.frame(tmp_obs2) && (nrow(tmp_obs1) + nrow(tmp_obs2) > 0)) {
names(tmp_obs2) <- names(tmp_obs1)
subjID_count <- subjID_count + 1
tmp_ado <- rbind(tmp_obs1, tmp_obs2)
names(tmp_ado)[3:6] <- c("amount_sooner", "delay_sooner", "amount_later", "delay_later")
tmp_ado$checkID <- i
tmp_ado$subjID <- subjID_count
ddt_dat <- rbind(ddt_dat, tmp_ado)
}
}
}
}
numSubjs <- length(unique(ddt_dat$subjID))
Tsubj <- as.vector( rep( 0, numSubjs ) ) # number of trials for each subject
for ( i in 1:numSubjs )  {
curSubj  <- unique(ddt_dat$subjID)[ i ]
Tsubj[i] <- sum( ddt_dat$subjID == curSubj )  # Tsubj[N]
}
# Setting maxTrials
maxTrials <- max(Tsubj)
delay_later   <- array(0, c(numSubjs, maxTrials) )
amount_later  <- array(0, c(numSubjs, maxTrials) )
delay_sooner  <- array(0, c(numSubjs, maxTrials) )
amount_sooner <- array(0, c(numSubjs, maxTrials) )
choice <- array(-1, c(numSubjs, maxTrials) )
for (i in 1:numSubjs) {
curSubj      <- unique(ddt_dat$subjID)[i]
useTrials    <- Tsubj[i]
tmp          <- subset(ddt_dat, ddt_dat$subjID == curSubj)
delay_later[i, 1:useTrials]   <- tmp$delay_later
amount_later[i, 1:useTrials]  <- tmp$amount_later
delay_sooner[i, 1:useTrials]  <- tmp$delay_sooner
amount_sooner[i, 1:useTrials] <- tmp$amount_sooner
choice[i, 1:useTrials] <- tmp$choice
}
# Keep survey data for subjects who have ADO data
survey_dat <- survey_dat[survey_dat$ID %in% ddt_dat$checkID,]
# Sanity check for ID order (should return true)
if((any(survey_dat$ID == rle(ddt_dat$checkID)$values)==F)) {
stop("IDs do not match!!!")
} else {
cat("IDs match!!! Congrats for not messing it up.\n")
}
# Stan-ready data
dataList <- list(
N             = numSubjs,
T             = maxTrials,
Tsubj         = Tsubj,
amount_later  = amount_later,
delay_later   = delay_later,
amount_sooner = amount_sooner,
delay_sooner  = delay_sooner,
choice        = choice
)
# Combine in list
all_dat <- list(survey_dat = survey_dat, ddt_dat = dataList)
saveRDS(all_dat, file = "Data/Preprocessed/1_preprocessed_DDT_trait_explanatory_allscales.rds")
setwd("~/Dropbox/Box/GitHub/Haines_2020_CPS/")
library(hBayesDM)
library(dplyr)
library(loo)
library(foreach)
library(cowplot)
library(ggpubr)
library(BEST)
plot_dat <- foreach(d=datasets, .combine = "rbind") %do% {
# Read in data
all_dat <- readRDS(file = paste0("Data/Preprocessed/1_preprocessed_DDT_trait_descriptive_", d, ".rds"))
data.frame(Dataset = rep(switch(d,
"MTURK" = "MTURK",
"REP" = "Student",
"TAL" = "SUD"),
nrow(all_dat$survey_dat)),
alpha   = ifelse(d == "MTURK", "light", "dark"),
BIS     = all_dat$survey_dat$bis_noplan,
STAI    = all_dat$survey_dat$stai_s,
INT     = all_dat$survey_dat$bis_noplan*all_dat$survey_dat$stai_s)
} %>%
mutate(Dataset = factor(Dataset,
levels = c("Student", "MTURK", "SUD"),
labels = c("Student", "MTURK", "SUD")))
with(plot_dat, t.test(BIS[Dataset=="Student"], BIS[Dataset=="MTURK"]))
with(plot_dat, t.test(BIS[Dataset=="Student"], BIS[Dataset=="SUD"]))
with(plot_dat, t.test(BIS[Dataset=="MTURK"], BIS[Dataset=="SUD"]))
with(plot_dat, t.test(STAI[Dataset=="Student"], STAI[Dataset=="MTURK"]))
with(plot_dat, t.test(STAI[Dataset=="Student"], STAI[Dataset=="SUD"]))
with(plot_dat, t.test(STAI[Dataset=="MTURK"], STAI[Dataset=="SUD"]))
imp1 <- with(plot_dat, BESTmcmc(BIS[Dataset=="Student"], BIS[Dataset=="MTURK"], priors=NULL, parallel=FALSE))
pmain <- ggplot(plot_dat, aes(x = BIS, y = STAI, color = Dataset, shape = Dataset, alpha = alpha)) +
geom_point(size = 2) +
scale_color_manual(values = c("#1810b0", "gray", "#b0101d")) +
scale_alpha_manual(values = c(.3, .7), guide = F) +
# geom_point(data = plot_dat %>% filter(Dataset == "MTURK"), alpha = .1, size = 2) +
xlab("BIS-NP") +
ylab("STAI-S") +
theme_cowplot(font_size = 18)
xdens <- axis_canvas(pmain, axis = "x") +
geom_density(data = plot_dat, aes(x = BIS, fill = Dataset),
alpha = 0.7, size = .2) +
scale_fill_manual(values = c("#1810b0", "gray", "#b0101d"))
ydens <- axis_canvas(pmain, axis = "y", coord_flip = TRUE) +
geom_density(data = plot_dat, aes(x = STAI, fill = Dataset),
alpha = 0.7, size = .2) +
scale_fill_manual(values = c("#1810b0", "gray", "#b0101d")) +
coord_flip()
p1 <- insert_xaxis_grob(pmain, xdens, grid::unit(.2, "null"), position = "top")
p2 <- insert_yaxis_grob(p1, ydens, grid::unit(.2, "null"), position = "right")
ggdraw(p2)
rm(list=ls())
fit <- readRDS("~/Dropbox/Box/LAP/Impulsivety_Anxiety/Data/Fitted/mult_reg_estK_v16_combine_groups_allbase_rewEncode_trait_rewEncode_con_testset_init.rds")
fit@stanmodel
rstan:::rstudio_stanc("Code/Stan/trait_explanatory_model_testset.stan")
rstan:::rstudio_stanc("Code/Stan/trait_explanatory_model_testset.stan")
